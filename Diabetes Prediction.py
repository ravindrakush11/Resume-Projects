# -*- coding: utf-8 -*-
"""AI_Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xO1eYsv4dcxh9DbJCebdpSVn7Hd8iZCs
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/diabetes.csv")
data.head()

data.info()

data.describe()

len(data[data['Pregnancies']==0])

print("No. of zeros in Pregnancies-"+str(len(data[data['Pregnancies']==0])))
print("No. of zeros in Glucose-"+str(len(data[data['Glucose']==0])))
print("No. of zeros in BloodPressure-"+str(len(data[data['BloodPressure']==0])))
print("No. of zeros in SkinThickness-"+str(len(data[data['SkinThickness']==0])))
print("No. of zeros in Insulin-"+str(len(data[data['Insulin']==0])))
print("No. of zeros in DiabetesPedigreeFunction-"+str(len(data[data['DiabetesPedigreeFunction']==0])))
print("No. of zeros in BMI-"+str(len(data[data['BMI']==0])))
print("No. of zeros in Age-"+str(len(data[data['Age']==0])))

round(data['Glucose'].mean(),2)

#### Replace 0 with some value
mean_glucose = round(data['Glucose'].mean(),2)
data['Glucose'] = data['Glucose'].replace([0],mean_glucose)

meanBloodPressure = round(data['BloodPressure'].mean(),2)
data['BloodPressure'] = data['BloodPressure'].replace(0,meanBloodPressure)

meanSkinThickness = round(data['SkinThickness'].mean(),2)
data['SkinThickness'] = data['SkinThickness'].replace(0,meanSkinThickness)

meanInsulin = round(data['Insulin'].mean(),2)
data['Insulin'] = data['Insulin'].replace(0,meanInsulin)

meanBMI = round(data['BMI'].mean(),2)
data['BMI'] = data['BMI'].replace(0,meanBMI)

meanDiabetesPedigreeFunction = round(data['DiabetesPedigreeFunction'].mean(),2)
data['DiabetesPedigreeFunction'] = data['DiabetesPedigreeFunction'].replace(0,meanDiabetesPedigreeFunction)

data.describe()

print("No. of zeros in Pregnancies-"+str(len(data[data['Pregnancies']==0])))
print("No. of zeros in Glucose-"+str(len(data[data['Glucose']==0])))
print("No. of zeros in BloodPressure-"+str(len(data[data['BloodPressure']==0])))
print("No. of zeros in SkinThickness-"+str(len(data[data['SkinThickness']==0])))
print("No. of zeros in Insulin-"+str(len(data[data['Insulin']==0])))
print("No. of zeros in DiabetesPedigreeFunction-"+str(len(data[data['DiabetesPedigreeFunction']==0])))
print("No. of zeros in BMI-"+str(len(data[data['BMI']==0])))
print("No. of zeros in Age-"+str(len(data[data['Age']==0])))

data.head()

### Split data in features and targets
x = data.iloc[:,0:-1]
y = data.iloc[:,-1] 

#x = data.drop("Outcome",axis=1)
#y = data['Outcome']

y.value_counts()

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.8,random_state=1)

ytrain.value_counts()

import keras as kr
model = kr.models.Sequential()  #empty model of neural network
#adding the layers
model.add(kr.layers.Dense(16,input_dim = 8,activation="relu"))  #Input layer
model.add(kr.layers.Dense(32,activation="relu"))                #Hidden layer
model.add(kr.layers.Dense(1,activation="sigmoid"))               #Output layer
model.compile(loss="binary_crossentropy",optimizer="adam",metrics=["accuracy"])

model.fit(xtrain,ytrain,epochs=500)

ypred = model.predict(xtest)
ypred = ypred.round()

model.evaluate(xtest,ytest)
print('Test accuracy:' , accuracy * 100,'%')

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(ytest,ypred)
cm

import matplotlib.pyplot as plt
plt.plot(range(0, 2), accuracy)
plt.show()